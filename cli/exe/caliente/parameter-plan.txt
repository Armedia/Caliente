1) getOptionScheme() + getOptionSchemeExtensionSupport()
	* parse arguments
		* extendScheme(...)
	* process arguments
		* Identify engine to retrieve its classpath helpers
2) getClasspathHelpers()
	* apply classpath helpers pre
	* discover classpath helpers
	* apply classpath helpers post
3) init logging (taking options into account)
4) run()
	* Initialize stores
	* Execute the selected command


Pass 1
	GLOBALS
		-?,--help
		-l,--lib ${libdir1,libdir2,...,libdirN}
		--log ${log-basename}
		--log-cfg ${log-cfg-file}
		--list-engines
		--list-commands
	*	-e, --engine ${dfc|cmis|shpt|local|...}
		command [parameters...]

Pass 2
	COMMAND: ( ENCRYPT | ENC | DECRYPT | DEC )
		positionals = password values to encrypt/decrypt. if none, read from console/stdin

	COMMAND: ( EXPORT | IMPORT | COUNT )
		(common)
			-t,--threads ${threads}

		COMMAND: ( EXPORT | IMPORT )
			(common)
				-d,--db ${dir-or-config}
				-c,--content ${dir-or-config}
				--no-renditions
				--no-versions
				--skip-content
				--mail-from ${sender}
				--mail-to ${recipient1,recipient2,...,recipientN}
				--mail-cc ${recipient1,recipient2,...,recipientN}
				--mail-bcc ${recipient1,recipient2,...,recipientN}
				--mail-host ${host}
				--mail-port ${port}
				--mail-ssl ${sslMode}
				--mail-client-cert ${cert}
				--mail-server-cert ${cert}
				--mail-ca ${ca}
				--mail-user ${user}
				--mail-pass ${pass}
				--mail-auth ${mode}
				--error-count ${count}
				--manifest-types ${type1,type2,...,typeN}
				--manifest-outcomes  ${outcome1,outcome2,...,outcomeN}
				--exclude-types ${type1,type2,...,typeN}
				--filter ${filter}
				--transformation ${transformation}
				--external-metadata ${externalMeta}

		COMMAND: ( EXPORT | EXP | EX )
			(common)
				--content-strategy ${strategy}
				--direct-fs (change for strategy = direct?)
			*	--source ${source}  (either a path, a query predicate if supported, or a URL to an ID/locator list)

			Pass 3 (from --engine)
				DFC
				*	--docbase ${docbase}
				*	--user ${user}
				*	--password ${password}
					--unified
					--dfc ${dfc-dir}
					--dfc-prop ${dfc-prop-file}
					--dctm ${dctm-dir}
					--special-users ${user1,user2,...,userN}
					--special-groups ${group1,group2,...,groupN}
					--special-types ${type1,type2,...,typeN}
					--batch-size ${size}
					--owner-attributes ${att1,att2,...,attN}

				CMIS
				*	--url ${url}
				*	--user ${user}
				*	--password ${password}
					--domain ${domain}

				SHAREPOINT
				*	--url ${url}
				*	--user ${user}
				*	--password ${password}
					--domain ${domain}
					--source-prefix ${prefix}

				LOCAL
					--copy-content

		COMMAND: ( IMPORT | IMP | IM )
			(common)
				--filename-map ${file}
				--name-fix
				--no-filename-map
				--trim-prefix ${num}
				--target-location ${location}
				--attribute-map ${attributeMap}
				--user-map ${userMap}
				--group-map ${groupMap}
				--role-map ${roleMap}
				--validate-requirements

			Pass 3 (from --engine)
				DFC
				*	--docbase ${docbase}
				*	--user ${user}
				*	--password ${password}
					--dfc ${dfc-dir}
					--dfc-prop ${dfc-prop-file}
					--dctm ${dctm-dir}
					--default-password

				CMIS
				*	--url ${url}
				*	--user ${user}
					--domain ${domain}
				*	--password ${password}

				ALFRESCO
				*	--attribute-map ${mapper}
				*	--content-model ${model1,model2,...,modelN}

		COMMAND: ( COUNT | CNT | CN )
			(common)
				--no-versions
				--non-recursive
				--empty
				--hidden
				--private
				--include ${folder1,folder2,...,folderN}
				--exclude ${folder1,folder2,...,folderN}

			Pass 3 (from --engine)
				DFC
				*	--docbase ${docbase}
				*	--user ${user}
				*	--password ${password}
					--dfc ${dfc-dir}
					--dfc-prop ${dfc-prop-file}
					--dctm ${dctm-dir}
				*	--predicate ${predicate}

				CMIS
				*	--url ${url}
				*	--user ${user}
					--domain ${domain}
				*	--password ${password}
				*	--root ${path|nodeRef}
