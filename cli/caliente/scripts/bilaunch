#!/bin/bash
SCRIPT="$(readlink -f "${0}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

if ! . "${BASEDIR}/caliente.lib.sh" ; then
	echo "Failed to load the main script library"
	exit 99
fi

USAGE="[-c] -h alfrescoUrl [-u user -p password | -A authenticationFile] -s source -t target [-D] [-R]"

start_import() {
	local SRC="${1}"
	local TGT="${2}"
	call_alfresco POST "${ALF_URL}/s/bulk/import/initiate" "sourceDirectory=${SRC}" "targetPath=${TGT}" "dryRun=${DRYRUN}" "replaceExisting=${REPLACE}"
}

ALF_URL=""
ALF_USER=""
ALF_PASS=""
ALF_PASS_SET="false"
PREFER_CURL="false"
DRYRUN="false"
REPLACE="false"

while getopts ":ch:u:p:A:s:t:DR" OPT "${@}" ; do
	case "${OPT}" in
		c )	${PREFER_CURL} && fail "May not specify -c more than once"
			PREFER_CURL="true"
			;;
		h )	[ -n "${ALF_URL}" ] && fail "May not specify more than one -h value"
			[ -z "${OPTARG}" ] && fail "May not specify an empty URL"
			ALF_URL="${OPTARG}"
			;;
		u )	[ -n "${ALF_USER}" ] && fail "May not specify more than one -u value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -u"
			[ -z "${OPTARG}" ] && fail "May not specify an empty username"
			ALF_USER="${OPTARG}"
			;;
		p )	${ALF_PASS_SET} && fail "May not specify more than one -p value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -p"
			ALF_PASS="${OPTARG}"
			ALF_PASS_SET="true"
			;;
		A )	[ -n "${ALF_USER}" ] && fail "May not specify -u and -A"
			${ALF_PASS_SET} && fail "May not specify -p and -A"
			[ -z "${OPTARG}" ] && fail "May not specify an empty authentication file"
			ALF_AUTH="${OPTARG}"
			[ -e "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] does not exist"
			[ -f "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] is not a regular file"
			[ -r "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] can't be read"
			;;
		s )	[ -n "${SOURCE}" ] && fail "May not specify -s more than once"
			[ -z "${OPTARG}" ] && fail "May not specify an empty source path"
			SOURCE="$(normalize_path "${OPTARG}")"
			[ ${?} -ne 0 ] && fail "Illegal source path [${OPTARG}] - not fully normalized"
			;;
		t )	[ -n "${TARGET}" ] && fail "May not specify -t more than once"
			[ -z "${OPTARG}" ] && fail "May not specify an empty target path"
			TARGET="$(normalize_path "${OPTARG}")"
			[ ${?} -ne 0 ] && fail "Illegal target path [${OPTARG}] - not fully normalized"
			;;
		D ) ${DRYRUN} && fail "May not specify -D more than once"
			DRYRUN="true"
			;;
		R ) ${REPLACE} && fail "May not specify -R more than once"
			REPLACE="true"
			;;
		? )	OI="$(( OPTIND - 1 ))"
			usage "Parameter ${!OI} is not valid or unexpected here"
			;;
	esac
done

[ -z "${SOURCE}" ] && usage "-s requires a non-empty value"
[ -z "${TARGET}" ] && usage "-t requires a non-empty value"
[ -z "${ALF_URL}" ] && usage "-h requires a non-empty value"
[ -z "${ALF_USER}" -a -z "${ALF_AUTH}" ] && usage "Must provide either -u or -A"
[ -n "${ALF_USER}" ] && ! ${ALF_PASS_SET} && usage "Must provide a password using -p, or use -A"

JQ="$(find_exe jq true)"
WGET="$(find_exe wget)"
CURL="$(find_exe curl)"
[ -z "${WGET}" -a -z "${CURL}" ] && fail "Must have either curl or wget installed - can't continue"

if [ -n "${ALF_AUTH}" ] ; then
	AUTH_DATA="$(cat "${ALF_AUTH}")"
	parse "." <<< "${AUTH_DATA}" &>/dev/null || fail "The authentication file [${ALF_AUTH}] must have proper JSON syntax"
	ALF_USER="$(parse_value ".user" <<< "${AUTH_DATA}")"
	ALF_PASS="$(parse_value ".password" <<< "${AUTH_DATA}")"
	ALF_PASS_SET="true"
fi

# Choose which getter function to use. WGET will be preferred
[ -n "${CURL}" ] && CALL="curl_call"
[ -n "${WGET}" ] && CALL="wget_call"
${PREFER_CURL} && [ -n "${CURL}" ] && CALL="curl_call"

FULL_STATUS_JSON="$(call_alfresco GET "${ALF_URL}/s/bulk/import/status.json")"
[ ${?} -ne 0 ] && fail "Failed to retrieve the status data"

STATUS="$(parse_value ".processingState" <<< "${FULL_STATUS_JSON}")"
case "${STATUS^^}" in
	"NEVER RUN"	| \
	"SUCCEEDED"	| \
	"FAILED"	| \
	"STOPPED"	) ;;

	"SCANNING" | \
	"IMPORTING" | \
	"STOPPING" | \
	"PAUSED" )
		SOURCE="$(parse_value ".sourceParameters[\"Source Directory\"]" <<< "${FULL_STATUS_JSON}")"
		TARGET="$(parse_value ".targetPath" <<< "${FULL_STATUS_JSON}")"
		DRYRUN="$(parse_value ".dryRun" <<< "${FULL_STATUS_JSON}")"
		ERRORS="$(parse_value ".errorInfo | length" <<< "${FULL_STATUS_JSON}")"
		err "ERROR: BI is active (${STATUS^^})"
		err "\tSOURCE : [${SOURCE}]"
		err "\tTARGET : [${TARGET}]"
		err "\tDRY RUN: ${DRYRUN}"
		err "\tERRORS : ${ERRORS}"
		exit 1
		;;

	* )
		# Unknown!!
		say "Unknown BI status [${STATUS}]"
		exit 2
		;;
esac

say "Launching BI at [${ALF_URL}] as [${ALF_USER}]..."
say "\tSOURCE : [${SOURCE}]"
say "\tTARGET : [${TARGET}]"
say "\tDRY RUN: ${DRYRUN}"
OUT="$(start_import "${SOURCE}" "${TARGET}")"
RC="${?}"
if [ ${RC} -eq 0 ] ; then
	say "Bulk Import started"
else
	say "Bulk Import was not started (RC=${RC})"
fi
exit ${RC}
