#!/bin/bash
SCRIPT="$(readlink -f "${0}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

if ! . "${BASEDIR}/caliente.lib.sh" ; then
	echo "Failed to load the main script library"
	exit 99
fi

USAGE="[-c] -h alfrescoUrl [-u user -p password | -A authenticationFile] [-W pollSec] [-I]"

LOGMARK="$(date +%Y%m%d-%H%M%S)"
# Open up the log on file descriptor 9, if it's not already open
LOG="${BASEDIR}/${SCRIPT}.${LOGMARK}.log"

process() {
	local SRC="${1}"
	local IDX="${2}"

	local RC=0

	local FULL_IDX="${SRC}${SRC:+/}${IDX}"
	say "Launching PP for [${FULL_IDX}]..."
	"${PPLAUNCH}" ${CURL} -u "${ALF_USER}" -p "${ALF_PASS}" -h "${ALF_URL}" -s "${SRC}" -i "${IDX}" |& silent_log
	RC="${PIPESTATUS[0]}"
	log "RC=[${RC}]"
	[ ${RC} -eq 0 ] || return ${RC}

	say "Waiting for PP for [${FULL_IDX}]..."
	"${PPCHECK}" ${CURL} -u "${ALF_USER}" -p "${ALF_PASS}" -h "${ALF_URL}" -w -W ${POLLSEC} |& silent_log
	RC="${PIPESTATUS[0]}"
	log "RC=[${RC}]"
	[ ${RC} -eq 0 ] || ${IGNORE_ERRORS} || return ${RC}

	return 0
}

ALF_URL=""
ALF_USER=""
ALF_PASS=""
ALF_PASS_SET="false"
PREFER_CURL="false"

IGNORE_ERRORS="false"
MIN_POLLSEC="3"
POLLSEC="30"
POLLSEC_SET="false"

while getopts ":ch:u:p:A:W:I" OPT "${@}" ; do
	case "${OPT}" in
		c )	${PREFER_CURL} && fail "May not specify -c more than once"
			PREFER_CURL="true"
			;;
		h )	[ -n "${ALF_URL}" ] && fail "May not specify more than one -h value"
			[ -z "${OPTARG}" ] && fail "May not specify an empty URL"
			ALF_URL="${OPTARG}"
			;;
		u )	[ -n "${ALF_USER}" ] && fail "May not specify more than one -u value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -u"
			[ -z "${OPTARG}" ] && fail "May not specify an empty username"
			ALF_USER="${OPTARG}"
			;;
		p )	${ALF_PASS_SET} && fail "May not specify more than one -p value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -p"
			ALF_PASS="${OPTARG}"
			ALF_PASS_SET="true"
			;;
		A )	[ -n "${ALF_USER}" ] && fail "May not specify -u and -A"
			${ALF_PASS_SET} && fail "May not specify -p and -A"
			[ -z "${OPTARG}" ] && fail "May not specify an empty authentication file"
			ALF_AUTH="${OPTARG}"
			[ -e "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] does not exist"
			[ -f "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] is not a regular file"
			[ -r "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] can't be read"
			;;
		I )	${IGNORE_ERRORS} && fail "May not specify -I more than once"
			IGNORE_ERRORS="true"
			;;
		W )	${POLLSEC_SET} && fail "May not specify -W more than once"
			POLLSEC="${OPTARG}"
			[[ "${POLLSEC}" =~ ^[1-9][0-9]* ]] || fail "The value [${POLLSEC}] is not a valid number"
			if [ ${POLLSEC} -lt ${MIN_POLLSEC} ] ; then
				POLLSEC=${MIN_POLLSEC}
				say "Polling interval may not be less than ${POLLSEC} seconds"
			fi
			POLLSEC_SET="true"
			;;
		? )	OI="$(( OPTIND - 1 ))"
			usage "Parameter ${!OI} is not valid or unexpected here"
			;;
	esac
done

shift $(( OPTIND - 1 ))

[ -z "${ALF_URL}" ] && usage "-h requires a non-empty value"
[ -z "${ALF_USER}" -a -z "${ALF_AUTH}" ] && usage "Must provide either -u or -A"
[ -n "${ALF_USER}" ] && ! ${ALF_PASS_SET} && usage "Must provide a password using -p, or use -A"

JQ="$(find_exe jq true)"
PPLAUNCH="$(find_script pplaunch ${LAUNCH_PP})"
PPCHECK="$(find_script ppcheck ${LAUNCH_PP})"

CURL=""
${PREFER_CURL} && CURL="-c"

if [ -n "${ALF_AUTH}" ] ; then
	AUTH_DATA="$(cat "${ALF_AUTH}")"
	parse "." <<< "${AUTH_DATA}" &>/dev/null || fail "The authentication file [${ALF_AUTH}] must have proper JSON syntax"
	ALF_USER="$(parse_value ".user" <<< "${AUTH_DATA}")"
	ALF_PASS="$(parse_value ".password" <<< "${AUTH_DATA}")"
	ALF_PASS_SET="true"
fi

while read index source ; do
	process "${source}" "${index}" || exit ${?}
done
