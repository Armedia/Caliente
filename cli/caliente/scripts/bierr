#!/bin/bash
SCRIPT="$(readlink -f "${0}")"
BASEDIR="$(dirname "${0}")"
SCRIPT="$(basename "${0}")"

say() {
	echo -e "${@}"
}

err() {
	say "${@}" 1>&2
}

fail() {
	err "ERROR: ${@}"
	exit 1
}

usage() {
	err "usage: ${SCRIPT} [-c] -h alfrescoUrl [-u user [-p password] | -A authenticationFile]"
	for e in "${@}" ; do
		err "\t${e}"
	done
	exit 1
}

parse_raw() {
	parse --raw-output "${@}"
}

parse() {
	"${JQ}" "${@}"
}

call_alfresco() {
	local OUT=""
	local RC=0
	{
		OUT="$("${CALL}" "${@}" 2>&1 1>&3-)"
		RC=${?}
	} 3>&1
	[ ${RC} -ne 0 ] && err "${OUT}"
	return ${RC}
}

get_status() {
	call_alfresco "${ALF_URL}/s/bulk/import/status.json"
}

curl_call() {
	local URL="${1}"
	local METHOD="${2:-GET}"
	local CURL_AUTH="${ALF_USER}"
	${ALF_PASS_SET} && CURL_AUTH="${CURL_AUTH}:${ALF_PASS}"
	"${CURL}" -f -X "${METHOD}" -u "${CURL_AUTH}" --url "${URL}" --retry 10 --retry-delay 10
}

wget_call() {
	local URL="${1}"
	local METHOD="${2:-GET}"
	local WGET_PASS="--ask-password"
	${ALF_PASS_SET} && WGET_PASS="--password=${ALF_PASS}"
	"${WGET}" --method="${METHOD}" --tries 10 --waitretry 10 --user="${ALF_USER}" "${WGET_PASS}" -O - "${URL}"
}

find_exe() {
	local EXE_NAME="${1}"
	local REQUIRED="${2}"
	REQUIRED="${REQUIRED,,}"
	case "${REQUIRED}" in
		true | false ) ;;
		* ) REQUIRED="false" ;;
	esac

	local EXE="$(which "${EXE_NAME}")"
	[ -z "${EXE}" ] && EXE="/usr/bin/${EXE_NAME}"
	[ -f "${EXE}" ] || { ${REQUIRED} && fail "'${EXE_NAME}' is not installed, but is required by this script" ; return 1 ; }
	[ -x "${EXE}" ] || { ${REQUIRED} && fail "'${EXE}' is not executable, but is required by this script" ; return 2 ; }
	echo "${EXE}"
	return 0
}

ALF_URL=""
ALF_USER=""
ALF_PASS=""
ALF_PASS_SET="false"
PREFER_CURL="false"

while getopts ":ch:u:p:A:" OPT "${@}" ; do
	case "${OPT}" in
		c )	${PREFER_CURL} && fail "May not specify -c more than once"
			PREFER_CURL="true"
			;;
		h )	[ -n "${ALF_URL}" ] && fail "May not specify more than one -h value"
			[ -z "${OPTARG}" ] && fail "May not specify an empty URL"
			ALF_URL="${OPTARG}"
			;;
		u )	[ -n "${ALF_USER}" ] && fail "May not specify more than one -u value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -u"
			[ -z "${OPTARG}" ] && fail "May not specify an empty username"
			ALF_USER="${OPTARG}"
			;;
		p )	${ALF_PASS_SET} && fail "May not specify more than one -p value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -p"
			ALF_PASS="${OPTARG}"
			ALF_PASS_SET="true"
			;;
		A )	[ -n "${ALF_USER}" ] && fail "May not specify -u and -A"
			${ALF_PASS_SET} && fail "May not specify -p and -A"
			[ -z "${OPTARG}" ] && fail "May not specify an empty authentication file"
			ALF_AUTH="${OPTARG}"
			[ -e "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] does not exist"
			[ -f "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] is not a regular file"
			[ -r "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] can't be read"
			;;
		? )	OI="$(( OPTIND - 1 ))"
			usage "Parameter ${!OI} is not valid or unexpected here"
			;;
	esac
done

[ -z "${ALF_URL}" ] && usage "-h requires a non-empty value"
[ -z "${ALF_USER}" -a -z "${ALF_AUTH}" ] && usage "Must provide either -u or -A"

JQ="$(find_exe jq true)"
WGET="$(find_exe wget)"
CURL="$(find_exe curl)"
[ -z "${WGET}" -a -z "${CURL}" ] && fail "Must have either curl or wget installed - can't continue"

if [ -n "${ALF_AUTH}" ] ; then
	AUTH_DATA="$(cat "${ALF_AUTH}")"
	parse "." <<< "${AUTH_DATA}" &>/dev/null || fail "The authentication file [${ALF_AUTH}] must have proper JSON syntax"
	ALF_USER="$(parse_raw ".user" <<< "${AUTH_DATA}")"
	ALF_PASS="$(parse_raw ".password" <<< "${AUTH_DATA}")"
	ALF_PASS_SET="true"
fi

# Choose which getter function to use. WGET will be preferred
[ -n "${CURL}" ] && CALL="curl_call"
[ -n "${WGET}" ] && CALL="wget_call"
${PREFER_CURL} && [ -n "${CURL}" ] && CALL="curl_call"

FULL_STATUS_JSON="$(get_status)"
[ ${?} -ne 0 ] && fail "Failed to retrieve the status data"

STATUS="$(parse_raw ".processingState" <<< "${FULL_STATUS_JSON}")"
SOURCE="$(parse_raw ".targetPath" <<< "${FULL_STATUS_JSON}")"
TARGET="$(parse_raw ".sourceParameters[\"Source Directory\"]" <<< "${FULL_STATUS_JSON}")"
DRYRUN="$(parse_raw ".dryRun" <<< "${FULL_STATUS_JSON}")"
ERROR_INFO="$(parse ".errorInfo" <<< "${FULL_STATUS_JSON}")"
ERRORS="$(parse ". | length" <<< "${ERROR_INFO}")"

case "${STATUS^^}" in
	"SCANNING"	| \
	"IMPORTING"	| \
	"STOPPING"	| \
	"PAUSED"	)
		say "BI is currently ${STATUS}, with ${ERRORS} errors reported"
		say "\tSOURCE : [${SOURCE}]"
		say "\tTARGET : [${TARGET}]"
		say "\tDRY RUN: ${DRYRUN}"
		;;

	"STOPPED"	)
		say "BI was stopped with ${ERRORS} errors reported"
		say "\tSOURCE : [${SOURCE}]"
		say "\tTARGET : [${TARGET}]"
		say "\tDRY RUN: ${DRYRUN}"
		;;

	"NEVER RUN"	)
		say "BI hasn't been run yet"
		exit 0
		;;

	"SUCCEEDED" )
		say "BI was successful with ${ERRORS} errors reported"
		say "\tSOURCE : [${SOURCE}]"
		say "\tTARGET : [${TARGET}]"
		say "\tDRY RUN: ${DRYRUN}"
		exit 0
		;;

	"FAILED"	)
		say "BI was run but failed with ${ERRORS} errors reported"
		say "\tSOURCE : [${SOURCE}]"
		say "\tTARGET : [${TARGET}]"
		say "\tDRY RUN: [${DRYRUN}]"
		;;

	* )
		say "Unknown BI status [${STATUS}]"
		exit 2
		;;
esac

for (( i = 0 ; i < ${ERRORS} ; i++ )) ; do
	ERR="$(parse ".[${i}]" <<< "${ERROR_INFO}")"
	TIMESTAMP="$(parse_raw ".TimeStamp" <<< "${ERR}")"
	ITEM="$(parse_raw ".Item" <<< "${ERR}")"
	DIRECTORY="$(parse_raw ".Directory" <<< "${ERR}")"
	SOURCE="$(parse_raw ".Source" <<< "${ERR}")"
	ERROR="$(parse_raw ".Error" <<< "${ERR}")"
	[ ${i} -eq 0 ] && say "============================================================"
	if ${SOURCE} ; then
		# An error from the source, no item info
		say "Source engine error:"
	else
		TYPE="Document"
		${DIRECTORY} && TYPE="Folder"
		say "${TYPE} import error:"
	fi
say "${ERROR}"
	say "============================================================"
done
