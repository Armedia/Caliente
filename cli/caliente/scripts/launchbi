#!/bin/bash
SCRIPT="$(readlink -f "${0}")"
BASEDIR="$(dirname "${0}")"
SCRIPT="$(basename "${0}")"

say() {
	echo -e "${@}"
}

err() {
	say "${@}" 1>&2
}

fail() {
	err "ERROR: ${@}"
	exit 1
}

usage() {
	err "usage: ${SCRIPT} [-c] -h alfrescoUrl [-u user [-p password] | -A authenticationFile] -s source -t target [-D]"
	for e in "${@}" ; do
		err "\t${e}"
	done
	exit 1
}

parse_raw() {
	parse --raw-output "${@}"
}

parse() {
	"${JQ}" "${@}"
}

get_status() {
	"${CALL}" "${ALF_URL}/s/bulk/import/status.json"
}


urlencode() {
	local OLD_LC_COLLATE="${LC_COLLATE}"
	LC_COLLATE="C"

	local LEN="${#1}"
	for (( i = 0; i < LEN; i++ )); do
		local c="${1:i:1}"
		case "${c}" in
			[a-zA-Z0-9.~_-] ) printf "$c" ;;
			" " ) printf "+" ;;
			* ) printf '%%%02X' "'$c" ;;
		esac
	done

	LC_COLLATE="${OLD_LC_COLLATE}"
}

urldecode() {
	local STR="${1//+/ }"
	printf '%b' "${STR//%/\\x}"
}

start_import() {
	local SRC="$(urlencode "${1}")"
	local TGT="$(urlencode "${2}")"
	local DRPARAM=""
	"${CALL}" "${ALF_URL}/s/bulk/import/initiate?sourceDirectory=${SRC}&targetPath=${TGT}&dryRun=${DRYRUN}" POST
}

curl_call() {
	local URL="${1}"
	local METHOD="${2:-GET}"
	local CURL_AUTH="${ALF_USER}"
	${ALF_PASS_SET} && CURL_AUTH="${CURL_AUTH}:${ALF_PASS}"
	"${CURL}" -s -X "${METHOD}" -u "${CURL_AUTH}" --url "${URL}"
}

wget_call() {
	local URL="${1}"
	local METHOD="${2:-GET}"
	local WGET_PASS="--ask-password"
	${ALF_PASS_SET} && WGET_PASS="--password=${ALF_PASS}"
	"${WGET}" --quiet --method="${METHOD}" --user="${ALF_USER}" "${WGET_PASS}" -O - "${URL}"
}

normalize_path() {
	# Remove all . and .. sequences
	# Returns 0 if successful, 1 if the .. recursion goes too far up
	local SRC=()
	local TGT=()
	local IDX=()
	IFS="/" read -r -a SRC <<< "${1}"
	local LEADING=false
	local FIRST=true
	for e in "${SRC[@]}" ; do
		case "${e}" in
			.. )
				[ ${#TGT[@]} -lt 1 ] && return 1
				IDX=(${!TGT[@]});
				unset TGT[${IDX[@]: -1}]
				;;
			"" ) ${FIRST} && LEADING=true ;;
			. ) ;; # Do nothing - must be silently skipped
			* ) TGT+=("${e}") ;;
		esac
		FIRST=false
	done
	${LEADING} || FIRST=true
	for e in "${TGT[@]}" ; do
		${FIRST} || echo -en "/"
		echo -en "${e}"
		FIRST=false
	done
	${FIRST} && echo -en "/"
	echo ""
	return 0
}

find_exe() {
	local EXE_NAME="${1}"
	local REQUIRED="${2}"
	REQUIRED="${REQUIRED,,}"
	case "${REQUIRED}" in
		true | false ) ;;
		* ) REQUIRED="false" ;;
	esac

	local EXE="$(which "${EXE_NAME}")"
	[ -z "${EXE}" ] && EXE="/usr/bin/${EXE_NAME}"
	[ -f "${EXE}" ] || { ${REQUIRED} && fail "'${EXE_NAME}' is not installed, but is required by this script" ; return 1 ; }
	[ -x "${EXE}" ] || { ${REQUIRED} && fail "'${EXE}' is not executable, but is required by this script" ; return 2 ; }
	echo "${EXE}"
	return 0
}

ALF_URL=""
ALF_USER=""
ALF_PASS=""
ALF_PASS_SET="false"
PREFER_CURL="false"
DRYRUN="false"

while getopts ":ch:u:p:A:s:t:D" OPT "${@}" ; do
	case "${OPT}" in
		c )	${PREFER_CURL} && fail "May not specify -c more than once"
			PREFER_CURL="true"
			;;
		h )	[ -n "${ALF_URL}" ] && fail "May not specify more than one -h value"
			[ -z "${OPTARG}" ] && fail "May not specify an empty URL"
			ALF_URL="${OPTARG}"
			;;
		u )	[ -n "${ALF_USER}" ] && fail "May not specify more than one -u value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -u"
			[ -z "${OPTARG}" ] && fail "May not specify an empty username"
			ALF_USER="${OPTARG}"
			;;
		p )	${ALF_PASS_SET} && fail "May not specify more than one -p value"
			[ -n "${ALF_AUTH}" ] && fail "May not specify -A and -p"
			ALF_PASS="${OPTARG}"
			ALF_PASS_SET="true"
			;;
		A )	[ -n "${ALF_USER}" ] && fail "May not specify -u and -A"
			${ALF_PASS_SET} && fail "May not specify -p and -A"
			[ -z "${OPTARG}" ] && fail "May not specify an empty authentication file"
			ALF_AUTH="${OPTARG}"
			[ -e "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] does not exist"
			[ -f "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] is not a regular file"
			[ -r "${ALF_AUTH}" ] || fail "The authentication file [${ALF_AUTH}] can't be read"
			;;
		s )	[ -n "${SOURCE}" ] && fail "May not specify -s more than once"
			[ -z "${OPTARG}" ] && fail "May not specify an empty source path"
			SOURCE="$(normalize_path "${OPTARG}")"
			[ ${?} -ne 0 ] && fail "Illegal source path [${OPTARG}] - not fully normalized"
			;;
		t )	[ -n "${TARGET}" ] && fail "May not specify -t more than once"
			[ -z "${OPTARG}" ] && fail "May not specify an empty target path"
			TARGET="$(normalize_path "${OPTARG}")"
			[ ${?} -ne 0 ] && fail "Illegal target path [${OPTARG}] - not fully normalized"
			;;
		D ) ${DRYRUN} && fail "May not specify -D more than once"
			DRYRUN="true"
			;;
		? )	OI="$(( OPTIND - 1 ))"
			usage "Parameter ${!OI} is not valid or unexpected here"
			;;
	esac
done

[ -z "${SOURCE}" ] && usage "-s requires a non-empty value"
[ -z "${TARGET}" ] && usage "-t requires a non-empty value"
[ -z "${ALF_URL}" ] && usage "-h requires a non-empty value"
[ -z "${ALF_USER}" -a -z "${ALF_AUTH}" ] && usage "Must provide either -u or -A"

JQ="$(find_exe jq true)"
WGET="$(find_exe wget)"
CURL="$(find_exe curl)"
[ -z "${WGET}" -a -z "${CURL}" ] && fail "Must have either curl or wget installed - can't continue"

if [ -n "${ALF_AUTH}" ] ; then
	AUTH_DATA="$(cat "${ALF_AUTH}")"
	parse "." <<< "${AUTH_DATA}" &>/dev/null || fail "The authentication file [${ALF_AUTH}] must have proper JSON syntax"
	ALF_USER="$(parse ".user" <<< "${AUTH_DATA}")"
	ALF_PASS="$(parse ".password" <<< "${AUTH_DATA}")"
	ALF_PASS_SET="true"
fi

# Choose which getter function to use. WGET will be preferred
[ -n "${CURL}" ] && CALL="curl_call"
[ -n "${WGET}" ] && CALL="wget_call"
${PREFER_CURL} && [ -n "${CURL}" ] && CALL="curl_call"

FULL_STATUS_JSON="$(get_status)"
[ ${?} -ne 0 ] && fail "Failed to retrieve the status data"

STATUS="$(parse_raw ".processingState" <<< "${FULL_STATUS_JSON}")"
case "${STATUS^^}" in
	"NEVER RUN"	| \
	"SUCCEEDED"	| \
	"FAILED"	| \
	"STOPPED"	) ;;

	"SCANNING" | \
	"IMPORTING" | \
	"STOPPING" | \
	"PAUSED" )
		SOURCE="$(parse_raw ".sourceParameters[\"Source Directory\"]" <<< "${FULL_STATUS_JSON}")"
		TARGET="$(parse_raw ".targetPath" <<< "${FULL_STATUS_JSON}")"
		DRYRUN="$(parse_raw ".dryRun" <<< "${FULL_STATUS_JSON}")"
		ERRORS="$(parse_raw ".errorInfo | length" <<< "${FULL_STATUS_JSON}")"
		err "ERROR: BI is active (${STATUS^^})"
		err "\tSOURCE : [${SOURCE}]"
		err "\tTARGET : [${TARGET}]"
		err "\tDRY RUN: ${DRYRUN}"
		err "\tERRORS : ${ERRORS}"
		exit 1
		;;

	* )
		# Unknown!!
		say "Unknown BI status [${STATUS}]"
		exit 2
		;;
esac

say "$(date): Launching BI at [${ALF_URL}] as [${ALF_USER}]..."
say "\tSOURCE : [${SOURCE}]"
say "\tTARGET : [${TARGET}]"
say "\tDRY RUN: ${DRYRUN}"
OUT="$(start_import "${SOURCE}" "${TARGET}")"
RC="${?}"
if [ ${RC} -eq 0 ] ; then
	say "$(date): Bulk Import started"
else
	say "$(date): Bulk Import was not started (RC=${RC})"
fi
exit ${RC}
