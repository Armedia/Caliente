<?xml version="1.0" encoding="UTF-8"?>
<local-queries xmlns="http://www.armedia.com/ns/caliente/engine/local" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.armedia.com/ns/caliente/engine/local ../../main/resources/local.xsd">

	<!-- All paths given are expected to be relative to this directory -->
	<root-path>/some/root/path</root-path>

	<data-sources>
		<data-source name="xmlds">
			<url>jdbc:h2:mem:xmlds</url>
			<driver>org.h2.Driver</driver>
		</data-source>
	</data-sources>

	<!-- One or more SQL queries can be run to obtain path information -->
	<searches>

		<!-- Returned paths are expected to be relative to a single base location -->
		<search id="primary" dataSource="xmlds">
			<!-- The un-parameterized query to execute -->
			<sql><![CDATA[ select path from fsobject ]]></sql>

			<count>100</count>

			<!-- Which column(s) to explore when looking for the path to return -->
			<path-columns>
				<path-column>path</path-column>
			</path-columns>

			<!-- One or more post-processor scripts that will be applied, in turn, to each found path -->
			<!-- (the first non-null, non-empty value *after post-processing*, will be returned per record) -->
			<post-processors>
				<post-processor type="jexl3"><![CDATA[
					return path.trim();
				]]></post-processor>
				<post-processor type="class">com.armedia.caliente.engine.local.exporter.LocalQueryServiceTest::processorMethod</post-processor>
			</post-processors>
		</search>

		<!-- More searches, they'll be executed in order, and the results concatenated -->
		<search id="secondary" dataSource="xmlds">
			<!-- The un-parameterized query to execute -->
			<sql><![CDATA[ select path from fsobject ]]></sql>

			<skip>100</skip>
			<count>100</count>

			<!-- Which column(s) to explore when looking for the path to return -->
			<path-columns>
				<path-column>path</path-column>
			</path-columns>

			<!-- One or more post-processor scripts that will be applied, in turn, to each found path -->
			<!-- (the first non-null, non-empty value *after post-processing*, will be returned per record) -->
			<post-processors>
				<post-processor type="jexl3"><![CDATA[
					return path.trim();
				]]></post-processor>
				<post-processor type="class">com.armedia.caliente.engine.local.exporter.LocalQueryServiceTest::processorMethod</post-processor>
			</post-processors>
		</search>

		<search id="rest" dataSource="xmlds">
			<!-- The un-parameterized query to execute -->
			<sql><![CDATA[ select path from fsobject ]]></sql>

			<skip>200</skip>

			<!-- Which column(s) to explore when looking for the path to return -->
			<path-columns>
				<path-column>path</path-column>
			</path-columns>

			<!-- One or more post-processor scripts that will be applied, in turn, to each found path -->
			<!-- (the first non-null, non-empty value *after post-processing*, will be returned per record) -->
			<post-processors>
				<post-processor type="jexl3"><![CDATA[
					return path.trim();
				]]></post-processor>
				<post-processor type="class">com.armedia.caliente.engine.local.exporter.LocalQueryServiceTest::processorMethod</post-processor>
			</post-processors>
		</search>
	</searches>

	<!-- A list of historyId queries. The first one to return a value, wins -->
	<history-ids>

		<history-id id="primary" dataSource="xmlds">
			<![CDATA[ select history_id from fsobject where object_id = ? and history_id < '0000000F' ]]>
		</history-id>

		<history-id id="secondary" dataSource="xmlds">
			<![CDATA[ select history_id from fsobject where object_id = ? and history_id < '000000FF' ]]>
		</history-id>

		<history-id id="broken" dataSource="xmlds">
			<![CDATA[ this isn't even valid sql ]]>
		</history-id>

		<history-id id="final" dataSource="xmlds">
			<![CDATA[ select history_id from fsobject where object_id = ? ]]>
		</history-id>
	</history-ids>

	<!-- A list of version-list queries. The first one to return non-empty history, wins -->
	<version-lists>

		<version-list id="primary" dataSource="xmlds">
			<![CDATA[ select version_label, path from fsobject where history_id = ? and history_id < '0000000F' order by 1 ]]>
		</version-list>

		<version-list id="secondary" dataSource="xmlds">
			<![CDATA[ select version_label, path from fsobject where history_id = ? and history_id < '000000FF' order by 1 ]]>
		</version-list>

		<version-list id="broken" dataSource="xmlds">
			<![CDATA[ this isn't valid sql ]]>
		</version-list>

		<version-list id="final" dataSource="xmlds">
			<![CDATA[ select version_label, path from fsobject where history_id = ? order by 1 ]]>
		</version-list>

	</version-lists>

</local-queries>